# syntax=docker/dockerfile:1
# Keep this syntax directive! It's used to enable Docker BuildKit

################################
# POETRY-BASE
# Install Poetry for use in our virtual environment
################################

# Set base python image - use --build-arg at invocation to change
ARG PYTHON_IMAGE=python:311-slim

FROM ${PYTHON_IMAGE} as poetry-base

ARG POETRY_VERSION=1.6.1

ENV PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_VERSION=${POETRY_VERSION} \
    POETRY_HOME="/opt/poetry"

# Add pip so we can install Poetry
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
        build-essential

# https://python-poetry.org/docs/#installing-manually
RUN python -m venv ${POETRY_HOME}
RUN ${POETRY_HOME}/bin/pip install -U pip setuptools
RUN ${POETRY_HOME}/bin/pip install "poetry==${POETRY_VERSION}"


################################
# DEVELOPMENT
# Build the development container
################################

FROM poetry-base as development

ARG PROJECT_ROOT
ARG APPLICATION_SERVER_PORT
# A list of whatever tools you'll use in development. You may pass these from docker-compose.
# Pass these in with format --build-arg packages_to_install="package1 package2 package3"
ARG ADD_SYSTEM_LEVEL_PACKAGES

ENV PYTHONPATH=/${PROJECT_ROOT} \
    APPLICATION_SERVER_PORT=$APPLICATION_SERVER_PORT

# Install dev dependencies
RUN apt-get install -y \
    git \
    $ADD_SYSTEM_LEVEL_PACKAGES \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Note: manually specifying the path to the venv and adding it to the PATH eliminates
# the need to use poetry run before running a command in the dev container.
# I didn't do that because I want to stick with the default poetry behavior.


################################
# PRODUCTION-BASE
# Sets up the production base image
################################

FROM ${PYTHON_IMAGE} as production-image

ENV FASTAPI_ENV=production
ENV PATH="/opt/poetry/bin:$PATH"

COPY --from=poetry-base /opt/poetry /opt/poetry/
COPY --from=builder-base $PYSETUP_PATH $PYSETUP_PATH
COPY ./src /LLMitless/src
WORKDIR /LLMitless/src

# Principle of least privilege: create a new user for running the application
RUN groupadd -g 1001 python_application && \
    useradd -r -u 1001 -g python_application python_application

# Set the WORKDIR to the application root.
# https://www.uvicorn.org/settings/#development
# https://docs.docker.com/engine/reference/builder/#workdir
WORKDIR ${PYTHONPATH}
RUN chown python_application:python_application ${PYTHONPATH}

# Create cache directory and set permissions because user 1001 has no home
# and poetry cache directory.
# https://python-poetry.org/docs/configuration/#cache-directory
RUN mkdir ${POETRY_CACHE_DIR} && chown python_application:python_application ${POETRY_CACHE_DIR}

# Document the exposed port
# https://docs.docker.com/engine/reference/builder/#expose
EXPOSE ${APPLICATION_SERVER_PORT}

# Use the unpriveledged user to run the application
USER 1001

# Run the uvicorn application server.
CMD exec uvicorn --workers 1 --host 0.0.0.0 --port $APPLICATION_SERVER_PORT app.main:app

# CMD ["uvicorn", "src.serve:app", "--host", "0.0.0.0", "--port", "80"]